from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, StateFilter, or_f
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, PreCheckoutQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from keyboards import start_keyboard as kb
from config_data.config import Config, load_config
from database import requests as rq
from database.models import User, Subscribe, Rate, Dialog, Greeting, Partner
from utils.error_handling import error_handler
from filter.admin_filter import check_super_admin, IsSuperAdmin
from filter.user_filter import check_role

import logging
from datetime import datetime

router = Router()
config: Config = load_config()


class StateGreet(StatesGroup):
    greet = State()


async def check_subscribe_user(message: Message, tg_id: int, greet_text: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    :return:
    """
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    subscribes: list[Subscribe] = await rq.get_subscribes_user(tg_id=tg_id)
    active_subscribe = False
    if subscribes:
        last_subscribe: Subscribe = subscribes[-1]
        date_format = '%d-%m-%Y %H:%M'
        current_date = datetime.now().strftime('%d-%m-%Y %H:%M')
        delta_time = (datetime.strptime(current_date, date_format) -
                      datetime.strptime(last_subscribe.date_completion, date_format))
        rate: Rate = await rq.get_rate_id(rate_id=last_subscribe.rate_id)
        if rate:
            if delta_time.days < rate.duration_rate:
                rate: Rate = await rq.get_rate_id(rate_id=last_subscribe.rate_id)
                if last_subscribe.count_question < rate.question_rate:
                    active_subscribe = True
        else:
            active_subscribe = False
    # –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã
    if not subscribes or not active_subscribe:
        await message.answer(text=f'{greet_text}',
                             reply_markup=await kb.keyboard_start(role=rq.UserRole.user,
                                                                  tg_id=message.from_user.id))
    else:
        last_subscribe: Subscribe = subscribes[-1]
        rate_info: Rate = await rq.get_rate_id(rate_id=last_subscribe.rate_id)
        await message.answer(text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.username}!\n\n'
                                  f'<b>–í–∞—à —Ç–∞—Ä–∏—Ñ:</b> {rate_info.title_rate}\n'
                                  f'<b>–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {last_subscribe.date_completion}\n'
                                  f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {last_subscribe.count_question}/'
                                  f'{rate_info.question_rate}',
                             reply_markup=await kb.keyboard_start(role=rq.UserRole.user,
                                                                  tg_id=message.from_user.id))


@router.message(CommandStart())
@router.message(F.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@error_handler
async def process_start_command_user(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /start
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_start_command_user: {message.chat.id}')
    await state.set_state(state=None)
    info_dialog: Dialog = await rq.get_dialog_active_tg_id(tg_id=message.from_user.id)
    if info_dialog:
        await message.answer(text=f'–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{info_dialog.id_question}, '
                                  f'–¥–ª—è –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /close_dialog')
        return
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ—â–µ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    user: User = await rq.get_user_by_id(tg_id=message.from_user.id)
    if not user:
        if message.from_user.username:
            username = message.from_user.username
        else:
            username = "user_name"
        if await check_super_admin(telegram_id=message.from_user.id):
            role = rq.UserRole.admin
        else:
            role = rq.UserRole.user
        data_user = {"tg_id": message.from_user.id,
                     "username": username,
                     "role": role}
        await rq.add_user(data=data_user)
    # –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user: User = await rq.get_user_by_id(tg_id=message.from_user.id)
    if not user.offer_agreement:
        await message.answer(text='üîí –°–æ–≥–ª–∞—Å–∏–µ —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã\n\n'
                                  '–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—à–µ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞'
                                  ' –æ—Ñ–µ—Ä—Ç—ã. –í—ã –º–æ–∂–µ—Ç–µ <a href="https://telegra.ph/DOGOVOR-OFERTY-02-16-3">'
                                  '–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–≥–æ–≤–æ—Ä.</a>\n\n'
                                  '–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–æ–≥–ª–∞—Å–µ–Ω¬ª,'
                                  ' —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥.',
                             reply_markup=kb.keyboard_offer_agreement())
        return
    greet: Greeting = await rq.get_greeting()
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user.role == rq.UserRole.user:
        await message.answer(text=f'{greet.greet_text}',
                             reply_markup=await kb.keyboard_start(role=rq.UserRole.user,
                                                                  tg_id=message.from_user.id))
    # –ø–∞—Ä—Ç–Ω–µ—Ä
    elif user.role == rq.UserRole.partner:
        await message.answer(text=f'{greet.greet_text}\n\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ü–ê–†–¢–ù–ï–†–û–ú –ø—Ä–æ–µ–∫—Ç–∞',
                             reply_markup=await kb.keyboard_start(role=rq.UserRole.partner,
                                                                  tg_id=message.from_user.id))

    # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    elif user.role == rq.UserRole.admin:
        await message.answer(text=f'{greet.greet_text}\n\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú –ø—Ä–æ–µ–∫—Ç–∞',
                             reply_markup=await kb.keyboard_start(role=rq.UserRole.admin,
                                                                  tg_id=message.from_user.id))


@router.callback_query(F.data == 'change_role_admin')
@router.callback_query(F.data == 'change_role_partner')
@error_handler
async def change_role_admin(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info('change_role_admin')
    list_partner: list[Partner] = await rq.get_partners()
    if await check_super_admin(telegram_id=callback.from_user.id):
        await callback.message.edit_text(text=f'–ö–∞–∫—É—é —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?',
                                         reply_markup=kb.keyboard_select_role_admin())
    elif callback.from_user.id in list_partner:
        await callback.message.edit_text(text=f'–ö–∞–∫—É—é —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?',
                                         reply_markup=kb.keyboard_select_role_partner())


@router.callback_query(F.data.startswith('select_role_'))
@error_handler
async def change_role_admin_select_role(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info('change_role_admin_select_role')
    await callback.message.delete()
    select_role = callback.data.split('_')[-1]
    await rq.set_user_role(tg_id=callback.from_user.id, role=select_role)
    await callback.message.answer(text=f'–†–æ–ª—å {select_role.upper()} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                                  reply_markup=await kb.keyboard_start(role=select_role, tg_id=callback.from_user.id))
    await process_start_command_user(message=callback.message, state=state, bot=bot)


@router.message(F.text == '/change_greeting', IsSuperAdmin())
@error_handler
async def change_greeting(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info('change_greeting')
    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ /cancel')
    await state.set_state(StateGreet.greet)


@router.message(F.text, StateFilter(StateGreet.greet))
@error_handler
async def get_greet(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    :param message:
    :param state:
    :param bot:
    :return:
    """
    logging.info('get_greet')
    greeting = message.html_text
    await state.set_state(state=None)
    if greeting == '/cancel':
        await message.answer(text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ')
        return
    else:
        await rq.set_greeting(greet_text=greeting)
        await message.answer(text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')


@router.callback_query(F.data.startswith('offer_agreement_'))
@error_handler
async def offer_agreement_confirm(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info('offer_agreement_confirm')
    action = callback.data.split('_')[-1]
    # —Å–æ–≥–ª–∞—Å–∏–µ —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º –æ—Ñ–µ—Ä—Ç—ã
    if action == 'confirm':
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º
        await rq.set_offer_agreement(tg_id=callback.from_user.id)
        # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        greet: Greeting = await rq.get_greeting()
        # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user: User = await rq.get_user_by_id(tg_id=callback.from_user.id)
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏–º–µ–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.role == rq.UserRole.user:
            await callback.message.answer(text=f'{greet.greet_text}',
                                          reply_markup=await kb.keyboard_start(role=rq.UserRole.user,
                                                                               tg_id=callback.from_user.id))
        # –ø–∞—Ä—Ç–Ω–µ—Ä
        elif user.role == rq.UserRole.partner:
            await callback.message.answer(text=f'{greet.greet_text}\n\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ü–ê–†–¢–ù–ï–†–û–ú –ø—Ä–æ–µ–∫—Ç–∞',
                                          reply_markup=await kb.keyboard_start(role=rq.UserRole.partner,
                                                                               tg_id=callback.from_user.id))

        # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        elif user.role == rq.UserRole.admin:
            await callback.message.answer(text=f'{greet.greet_text}\n\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú –ø—Ä–æ–µ–∫—Ç–∞',
                                          reply_markup=await kb.keyboard_start(role=rq.UserRole.admin,
                                                                               tg_id=callback.from_user.id))
    await callback.answer()
