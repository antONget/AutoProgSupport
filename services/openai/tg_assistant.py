import os
import openai
import time
from config_data.config import load_config, Config
config: Config = load_config()


# from telegram import Update
# from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

OPENAI_API_KEY = config.tg_bot.api_key_openai
ASSISTANT_ID = config.tg_bot.assistant_id
TELEGRAM_BOT_TOKEN = config.tg_bot.token

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–µ–π
if not OPENAI_API_KEY or not ASSISTANT_ID or not TELEGRAM_BOT_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–∏ API –≤ .env —Ñ–∞–π–ª–µ!")

# –°–æ–∑–¥–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∏—Ç–∏ –±–µ—Å–µ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_threads = {}


def create_or_get_thread(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –Ω–∏—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é"""
    if user_id not in user_threads:
        thread = client.beta.threads.create()
        user_threads[user_id] = thread.id
    return user_threads[user_id]


def send_message_to_openai(user_id, user_input):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    thread_id = create_or_get_thread(user_id)

    client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=user_input
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    run = client.beta.threads.runs.create(thread_id=thread_id, assistant_id=ASSISTANT_ID)

    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    start_time = time.time()
    while time.time() - start_time < 30:
        time.sleep(1)
        run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if run.status == "completed":
            break

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    messages = client.beta.threads.messages.list(thread_id=thread_id)
    if messages.data:
        return messages.data[0].content[0].text.value
    return "–û—à–∏–±–∫–∞: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."


# def start(update: Update, context: CallbackContext):
#     """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
#     update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤–æ–ø—Ä–æ—Å!")


# def handle_message(update: Update, context: CallbackContext):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
#     user_id = update.message.chat_id
#     user_input = update.message.text
#
#     update.message.reply_text("‚è≥ –î—É–º–∞—é...")
#
#     try:
#         response = send_message_to_openai(user_id, user_input)
#         update.message.reply_text(response)
#     except Exception as e:
#         update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


# def main():
#     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
#     updater = Updater(TELEGRAM_BOT_TOKEN, use_context=True)
#     dp = updater.dispatcher
#
#     dp.add_handler(CommandHandler("start", start))
#     dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
#
#     updater.start_polling()
#     updater.idle()
#
#
# if __name__ == "__main__":
#     main()