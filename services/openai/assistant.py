import openai
import os
import time
from config_data.config import load_config, Config
config: Config = load_config()
# üîë –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π API-–∫–ª—é—á
API_KEY = config.tg_bot.api_key_openai
# üÜî –í—Å—Ç–∞–≤—å ID —Ç–≤–æ–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
ASSISTANT_ID = "asst_Td9iMeRH6MwhAKLgRGAt1PPs"
if not API_KEY or not ASSISTANT_ID:
    raise ValueError("–û—à–∏–±–∫–∞: API-–∫–ª—é—á –∏–ª–∏ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã!")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –Ω–∏—Ç–∏
thread_id = None


def create_or_get_thread(client):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –Ω–∏—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é"""
    global thread_id
    if thread_id is None:
        thread = client.beta.threads.create()
        thread_id = thread.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
    return thread_id


def send_message(client, user_input):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∏—Ç—å"""
    thread_id = create_or_get_thread(client)
    client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=user_input
    )


def wait_for_response(client, thread_id, run_id, timeout=30):
    """–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    start_time = time.time()
    while time.time() - start_time < timeout:
        time.sleep(1)
        run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run_id)
        if run.status == "completed":
            return run
    raise TimeoutError("–û—à–∏–±–∫–∞: –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è!")


def get_assistant_response(client, thread_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    messages = client.beta.threads.messages.list(thread_id=thread_id)

    if messages.data:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        return "\n".join([msg.content[0].text.value for msg in reversed(messages.data[:5])])

    return "–û—à–∏–±–∫–∞: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."


def chat_with_assistant():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    client = openai.OpenAI(api_key=API_KEY)

    print("ü§ñ GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

    while True:
        user_input = input("–í—ã: ")
        if user_input.lower() == "exit":
            print("üö™ –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞...")
            break

        thread_id = create_or_get_thread(client)
        send_message(client, user_input)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        run = client.beta.threads.runs.create(thread_id=thread_id, assistant_id=ASSISTANT_ID)

        try:
            wait_for_response(client, thread_id, run.id)
            response = get_assistant_response(client, thread_id)
            print("GPT:", response)
        except TimeoutError as e:
            print(e)


if __name__ == "__main__":
    chat_with_assistant()